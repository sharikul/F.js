{"name":"F.js","tagline":"A functional JavaScript library","body":"# F.js - a functional JavaScript library\r\nF.js is a library of functions which do various tasks and are designed to aid your development whenever required. With the exception of the `Expose` function, you are required to load other functions whenever required. Individual function names start with a capital letter whilst multiple-worded functions are camel-cased.\r\n\r\n## Meet the functions\r\n### `Expose`\r\nThe `Expose` function is the only F.js function that is available from the `window` scope by default. Its purpose is to load other F.js functions into the scope specified (_`window` by default_) for your use.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nwindow.Expose = function(fn, scope);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L710](https://github.com/sharikul/F.js/blob/master/F.js#L710)\r\n\r\n#### **Returns**:\r\nBoolean\r\n\r\n#### **Predefined values**:\r\n'*' (caret symbol)\r\n\r\n#### **Usage**:\r\n```javascript\r\n// Our aim is to load the toArray, forEach, and Concat functions into the window scope\r\nExpose(['toArray', 'forEach', 'Concat']);\r\n// Done!\r\n\r\n// You can also load individual functions by supplying a string\r\nExpose('toArray');\r\n\r\n// And you can expose a function into another scope, e.g. a custom object\r\nvar fns = {}\r\nExpose(['toArray', 'forEach', 'Concat'], fns);\r\n\r\n// You can choose to load every F.js function into the scope specified\r\nExpose('*');\r\n```\r\n\r\n### `toArray`\r\nThe `toArray` function can be used to convert array like objects, and hash tables into arrays.\r\n\r\n#### **Implementation**:\r\n```javascript\r\ntoArray: function(nonArray);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L21](https://github.com/sharikul/F.js/blob/master/F.js#L21)\r\n\r\n#### **Returns**:\r\nArray\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\n// This will return a nodelist.\r\nvar divs = document.querySelectorAll('div');\r\n\r\n// Though it appears as an array, it isn't treated as one. toArray to the rescue!\r\nExpose('toArray');\r\nvar div_s = toArray(divs);\r\n// Done - div_s contains the elements from divs, and can be used as an array\r\n````\r\n\r\n### `forEach`\r\nYou can use `forEach` to loop over arrays and objects.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nforEach: function(object, callback);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L43](https://github.com/sharikul/F.js/blob/master/F.js#L43)\r\n\r\n#### **Returns**:\r\nMixed\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('forEach');\r\n\r\nvar array = [1, 2, 3, 4],\r\n    obj = {name: 'Sharikul', age: 18};\r\n\r\nforEach(array, function(num) {\r\n console.log(num); // Logs 1, 2, 3, 4\r\n});\r\n\r\nforEach(obj, function(value, key) {\r\n console.log('My ' + key + ' is ' + value); // Logs 'My name/age is Sharikul/18'\r\n});\r\n```\r\n\r\n### `Range`\r\n`Range` can be used to generate a sequence of numbers.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nRange: function(first, second);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L67](https://github.com/sharikul/F.js/blob/master/F.js#L67)\r\n\r\n#### **Returns**:\r\nArray\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('Range');\r\n\r\n// First, let's generate a range low-to-high.\r\nconsole.log( Range(1, 5) ); // Logs [1, 2, 3, 4, 5]\r\n\r\n// Now the opposite!\r\nconsole.log( Range(5, 1) ); // Logs [5, 4, 3, 2, 1]\r\n```\r\n\r\n### `Format`\r\nYou can use `Format` to create formatted strings using numerical indexes to denote where a specific value should be placed. Values should be supplied in order after the string.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nFormat: function(string);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L101](https://github.com/sharikul/F.js/blob/master/F.js#L101)\r\n\r\n#### **Returns**:\r\nString\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('Format');\r\n\r\nconsole.log( Format('Hello, {0}! You are {1} years old!', 'Sharikul', 18) ); // Logs 'Hello, Sharikul! You are 18 years old!'\r\n```\r\n\r\n### `Count`\r\n`Count` can count the number of items in an array and hash table object.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nCount: function(objorArray);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L126](https://github.com/sharikul/F.js/blob/master/F.js#L126)\r\n\r\n#### **Returns**:\r\nInt\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('Count');\r\nvar array = [1, 2, 3, 4],\r\n    obj = {name: 'Sharikul', age: 18};\r\n\r\nconsole.log( Count(array) ); // Logs 4\r\nconsole.log( Count(obj) ); // Logs 2\r\n```\r\n\r\n### `Concat`\r\nYou can use `Concat` to merge several different **arrays** into one master array. Each argument you supply must be an array and `Concat` doesn't merge sub-arrays. \r\n\r\n#### **Implementation**:\r\n```javascript\r\nConcat: function();\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L146](https://github.com/sharikul/F.js/blob/master/F.js#L146)\r\n\r\n#### **Returns**:\r\nArray\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('Concat');\r\n\r\nvar array1 = [1,2,3,4],\r\n    array2 = ['name', 'Sharikul'],\r\n    array3 = ['location', 'London'];\r\n\r\nconsole.log( Concat(array1, array2, array3) ); // Logs [1, 2, 3, 4, 'name', 'Sharikul', 'location', 'London']\r\n```\r\n\r\n### `attachEvent`\r\n`attachEvent` provides you with an interface to 'attach' event handlers to various elements. It enables you to attach one event, and its callback to a variety of elements as well.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nattachEvent: function(event, callback, element, bubble);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L179](https://github.com/sharikul/F.js/blob/master/F.js#L179)\r\n\r\n#### **Returns**:\r\nBoolean\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('attachEvent');\r\n```\r\n\r\n```html\r\n<body>\r\n <button id=\"button\">Click me, an alert will appear!</button>\r\n <p id=\"paragraph\">No click me, an alert will appear!</button>\r\n</body>\r\n```\r\n\r\n```javascript\r\nattachEvent('click', function() {\r\n alert('You have clicked!');\r\n}, ['#button', '#paragraph']); \r\n\r\n// OR\r\nattachEvent('click', function() {\r\n alert('You have clicked!');\r\n}, '#button');\r\n```\r\n\r\n### `typeOf`\r\nThe `typeOf` function works exactly like `typeof`, except that it has added support to recognize arrays, nodelists, and so on.\r\n\r\n#### **Implementation**:\r\n```javascript\r\ntypeOf: function(element);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L222](https://github.com/sharikul/F.js/blob/master/F.js#L222)\r\n\r\n#### **Returns**:\r\nString\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('typeOf');\r\n\r\nconsole.log( typeOf([1,2]) ); // Logs 'array'\r\nconsole.log( typeof({}) ); // Logs 'object'\r\nconsole.log( document.querySelectorAll('div') ); // Logs 'nodelist' \r\n```\r\n\r\n### `Store`\r\nThe `Store` function acts as a wrapper around the HTML 5 specific `localStorage` and `sessionStorage` functions.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nStore: function(access, key, value);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L238](https://github.com/sharikul/F.js/blob/master/F.js#L238)\r\n\r\n#### **Returns**:\r\nMixed\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('Store');\r\n\r\n// Set a value in the session storage. Works the same way for local storage.\r\nStore('session.set', 'name', 'Sharikul');\r\n\r\nconsole.log( Store('session.get', 'name') ); // Logs 'Sharikul'\r\n```\r\n\r\n### `upperCaseFirst`:\r\nThis function does exactly what its titled: capitalize's the string supplied.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nupperCaseFirst: function(word);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L261](https://github.com/sharikul/F.js/blob/master/F.js#L261)\r\n\r\n#### **Returns**:\r\nString or Boolean\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('upperCaseFirst');\r\n\r\nconsole.log( upperCaseFirst('sharikul') ); // Logs 'Sharikul'\r\n```\r\n\r\n### `Capitalize`\r\nThe `Capitalize` function uppercase's words in the supplied string.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nCapitalize: function(string);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L280](https://github.com/sharikul/F.js/blob/master/F.js#L280)\r\n\r\n#### **Returns**:\r\nString or Boolean\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('Capitalize');\r\n\r\nconsole.log( Capitalize('hello, my name is sharikul') ); // Logs 'Hello, My Name Is Sharikul'\r\n```\r\n\r\n### `inArray`\r\nThe `inArray` function checks in the supplied array whether the value specified exists in that array.\r\n\r\n#### **Implementation**:\r\n```javascript\r\ninArray: function(array, value);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L312](https://github.com/sharikul/F.js/blob/master/F.js#L312)\r\n\r\n#### **Returns**:\r\nBoolean\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('inArray');\r\n\r\nvar arr = ['name', 'Sharikul'];\r\nconsole.log( inArray(arr, 'name') ); // Logs 'true'\r\nconsole.log( inArray(arr, 'age') ); // Logs 'false'\r\n```\r\n\r\n### `Trim`\r\nThis function removes whitespace from around the string supplied.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nTrim: function(word);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L337](https://github.com/sharikul/F.js/blob/master/F.js#L337)\r\n\r\n#### **Returns**:\r\nString or Boolean\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('Trim');\r\n\r\nconsole.log( Trim(' hello ') ); // Logs 'hello'\r\n```\r\n\r\n### `lTrim`\r\nThe `lTrim` function removes whitespace to the left of the string provided.\r\n\r\n#### **Implementation**:\r\n```javascript\r\nlTrim: function(word);\r\n```\r\n\r\n#### **Source**:\r\n[https://github.com/sharikul/F.js/blob/master/F.js#L352](https://github.com/sharikul/F.js/blob/master/F.js#L352)\r\n\r\n#### **Returns**:\r\nString or Boolean\r\n\r\n#### **Predefined values**:\r\nNone\r\n\r\n#### **Usage**:\r\n```javascript\r\nExpose('lTrim');\r\n\r\nconsole.log( lTrim('  hello  ') ); // Logs 'Hello  '\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}